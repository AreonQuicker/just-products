// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productSegment: (where?: ProductSegmentWhereInput) => Promise<boolean>;
  segment: (where?: SegmentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productSegment: (
    where: ProductSegmentWhereUniqueInput
  ) => ProductSegmentNullablePromise;
  productSegments: (args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductSegment>;
  productSegmentsConnection: (args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductSegmentConnectionPromise;
  segment: (where: SegmentWhereUniqueInput) => SegmentNullablePromise;
  segments: (args?: {
    where?: SegmentWhereInput;
    orderBy?: SegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Segment>;
  segmentsConnection: (args?: {
    where?: SegmentWhereInput;
    orderBy?: SegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SegmentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductSegment: (
    data: ProductSegmentCreateInput
  ) => ProductSegmentPromise;
  updateProductSegment: (args: {
    data: ProductSegmentUpdateInput;
    where: ProductSegmentWhereUniqueInput;
  }) => ProductSegmentPromise;
  updateManyProductSegments: (args: {
    data: ProductSegmentUpdateManyMutationInput;
    where?: ProductSegmentWhereInput;
  }) => BatchPayloadPromise;
  upsertProductSegment: (args: {
    where: ProductSegmentWhereUniqueInput;
    create: ProductSegmentCreateInput;
    update: ProductSegmentUpdateInput;
  }) => ProductSegmentPromise;
  deleteProductSegment: (
    where: ProductSegmentWhereUniqueInput
  ) => ProductSegmentPromise;
  deleteManyProductSegments: (
    where?: ProductSegmentWhereInput
  ) => BatchPayloadPromise;
  createSegment: (data: SegmentCreateInput) => SegmentPromise;
  updateSegment: (args: {
    data: SegmentUpdateInput;
    where: SegmentWhereUniqueInput;
  }) => SegmentPromise;
  updateManySegments: (args: {
    data: SegmentUpdateManyMutationInput;
    where?: SegmentWhereInput;
  }) => BatchPayloadPromise;
  upsertSegment: (args: {
    where: SegmentWhereUniqueInput;
    create: SegmentCreateInput;
    update: SegmentUpdateInput;
  }) => SegmentPromise;
  deleteSegment: (where: SegmentWhereUniqueInput) => SegmentPromise;
  deleteManySegments: (where?: SegmentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productSegment: (
    where?: ProductSegmentSubscriptionWhereInput
  ) => ProductSegmentSubscriptionPayloadSubscription;
  segment: (
    where?: SegmentSubscriptionWhereInput
  ) => SegmentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductSegmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "itemCode_ASC"
  | "itemCode_DESC"
  | "baseItemCode_ASC"
  | "baseItemCode_DESC"
  | "colourCode_ASC"
  | "colourCode_DESC"
  | "sizeCode_ASC"
  | "sizeCode_DESC";

export type SegmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "rule_ASC"
  | "rule_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProductSegmentUpdateWithoutProductDataInput {
  code?: Maybe<String>;
  segment?: Maybe<SegmentUpdateOneRequiredWithoutProductsInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductSegmentUpsertWithWhereUniqueWithoutProductInput {
  where: ProductSegmentWhereUniqueInput;
  update: ProductSegmentUpdateWithoutProductDataInput;
  create: ProductSegmentCreateWithoutProductInput;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  itemCode?: Maybe<String>;
  itemCode_not?: Maybe<String>;
  itemCode_in?: Maybe<String[] | String>;
  itemCode_not_in?: Maybe<String[] | String>;
  itemCode_lt?: Maybe<String>;
  itemCode_lte?: Maybe<String>;
  itemCode_gt?: Maybe<String>;
  itemCode_gte?: Maybe<String>;
  itemCode_contains?: Maybe<String>;
  itemCode_not_contains?: Maybe<String>;
  itemCode_starts_with?: Maybe<String>;
  itemCode_not_starts_with?: Maybe<String>;
  itemCode_ends_with?: Maybe<String>;
  itemCode_not_ends_with?: Maybe<String>;
  baseItemCode?: Maybe<String>;
  baseItemCode_not?: Maybe<String>;
  baseItemCode_in?: Maybe<String[] | String>;
  baseItemCode_not_in?: Maybe<String[] | String>;
  baseItemCode_lt?: Maybe<String>;
  baseItemCode_lte?: Maybe<String>;
  baseItemCode_gt?: Maybe<String>;
  baseItemCode_gte?: Maybe<String>;
  baseItemCode_contains?: Maybe<String>;
  baseItemCode_not_contains?: Maybe<String>;
  baseItemCode_starts_with?: Maybe<String>;
  baseItemCode_not_starts_with?: Maybe<String>;
  baseItemCode_ends_with?: Maybe<String>;
  baseItemCode_not_ends_with?: Maybe<String>;
  colourCode?: Maybe<String>;
  colourCode_not?: Maybe<String>;
  colourCode_in?: Maybe<String[] | String>;
  colourCode_not_in?: Maybe<String[] | String>;
  colourCode_lt?: Maybe<String>;
  colourCode_lte?: Maybe<String>;
  colourCode_gt?: Maybe<String>;
  colourCode_gte?: Maybe<String>;
  colourCode_contains?: Maybe<String>;
  colourCode_not_contains?: Maybe<String>;
  colourCode_starts_with?: Maybe<String>;
  colourCode_not_starts_with?: Maybe<String>;
  colourCode_ends_with?: Maybe<String>;
  colourCode_not_ends_with?: Maybe<String>;
  sizeCode?: Maybe<String>;
  sizeCode_not?: Maybe<String>;
  sizeCode_in?: Maybe<String[] | String>;
  sizeCode_not_in?: Maybe<String[] | String>;
  sizeCode_lt?: Maybe<String>;
  sizeCode_lte?: Maybe<String>;
  sizeCode_gt?: Maybe<String>;
  sizeCode_gte?: Maybe<String>;
  sizeCode_contains?: Maybe<String>;
  sizeCode_not_contains?: Maybe<String>;
  sizeCode_starts_with?: Maybe<String>;
  sizeCode_not_starts_with?: Maybe<String>;
  sizeCode_ends_with?: Maybe<String>;
  sizeCode_not_ends_with?: Maybe<String>;
  segments_every?: Maybe<ProductSegmentWhereInput>;
  segments_some?: Maybe<ProductSegmentWhereInput>;
  segments_none?: Maybe<ProductSegmentWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProductUpsertWithoutSegmentsInput {
  update: ProductUpdateWithoutSegmentsDataInput;
  create: ProductCreateWithoutSegmentsInput;
}

export interface ProductCreateOneWithoutSegmentsInput {
  create?: Maybe<ProductCreateWithoutSegmentsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductSegmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ProductSegmentScalarWhereInput[] | ProductSegmentScalarWhereInput
  >;
  OR?: Maybe<ProductSegmentScalarWhereInput[] | ProductSegmentScalarWhereInput>;
  NOT?: Maybe<
    ProductSegmentScalarWhereInput[] | ProductSegmentScalarWhereInput
  >;
}

export interface ProductSegmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  segment?: Maybe<SegmentWhereInput>;
  product?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSegmentWhereInput[] | ProductSegmentWhereInput>;
  OR?: Maybe<ProductSegmentWhereInput[] | ProductSegmentWhereInput>;
  NOT?: Maybe<ProductSegmentWhereInput[] | ProductSegmentWhereInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  itemCode: String;
  baseItemCode: String;
  colourCode?: Maybe<String>;
  sizeCode?: Maybe<String>;
  segments?: Maybe<ProductSegmentCreateManyWithoutProductInput>;
}

export interface ProductSegmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductSegmentWhereInput>;
  AND?: Maybe<
    | ProductSegmentSubscriptionWhereInput[]
    | ProductSegmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProductSegmentSubscriptionWhereInput[]
    | ProductSegmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProductSegmentSubscriptionWhereInput[]
    | ProductSegmentSubscriptionWhereInput
  >;
}

export interface ProductSegmentCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductSegmentCreateWithoutProductInput[]
    | ProductSegmentCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
}

export interface ProductSegmentCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  code: String;
  segment: SegmentCreateOneWithoutProductsInput;
}

export type ProductSegmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SegmentCreateOneWithoutProductsInput {
  create?: Maybe<SegmentCreateWithoutProductsInput>;
  connect?: Maybe<SegmentWhereUniqueInput>;
}

export interface SegmentUpdateManyMutationInput {
  rule?: Maybe<String>;
}

export interface SegmentCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  rule: String;
}

export type SegmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductUpdateInput {
  itemCode?: Maybe<String>;
  baseItemCode?: Maybe<String>;
  colourCode?: Maybe<String>;
  sizeCode?: Maybe<String>;
  segments?: Maybe<ProductSegmentUpdateManyWithoutProductInput>;
}

export interface ProductSegmentUpdateWithWhereUniqueWithoutSegmentInput {
  where: ProductSegmentWhereUniqueInput;
  data: ProductSegmentUpdateWithoutSegmentDataInput;
}

export interface ProductSegmentUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductSegmentCreateWithoutProductInput[]
    | ProductSegmentCreateWithoutProductInput
  >;
  delete?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  connect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  set?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  update?: Maybe<
    | ProductSegmentUpdateWithWhereUniqueWithoutProductInput[]
    | ProductSegmentUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductSegmentUpsertWithWhereUniqueWithoutProductInput[]
    | ProductSegmentUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductSegmentScalarWhereInput[] | ProductSegmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductSegmentUpdateManyWithWhereNestedInput[]
    | ProductSegmentUpdateManyWithWhereNestedInput
  >;
}

export interface SegmentUpdateInput {
  rule?: Maybe<String>;
  products?: Maybe<ProductSegmentUpdateManyWithoutSegmentInput>;
}

export interface ProductSegmentUpdateWithWhereUniqueWithoutProductInput {
  where: ProductSegmentWhereUniqueInput;
  data: ProductSegmentUpdateWithoutProductDataInput;
}

export interface ProductSegmentCreateWithoutSegmentInput {
  id?: Maybe<ID_Input>;
  code: String;
  product: ProductCreateOneWithoutSegmentsInput;
}

export interface ProductUpdateWithoutSegmentsDataInput {
  itemCode?: Maybe<String>;
  baseItemCode?: Maybe<String>;
  colourCode?: Maybe<String>;
  sizeCode?: Maybe<String>;
}

export interface ProductSegmentCreateManyWithoutSegmentInput {
  create?: Maybe<
    | ProductSegmentCreateWithoutSegmentInput[]
    | ProductSegmentCreateWithoutSegmentInput
  >;
  connect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
}

export interface SegmentUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<SegmentCreateWithoutProductsInput>;
  update?: Maybe<SegmentUpdateWithoutProductsDataInput>;
  upsert?: Maybe<SegmentUpsertWithoutProductsInput>;
  connect?: Maybe<SegmentWhereUniqueInput>;
}

export interface ProductSegmentUpdateManyMutationInput {
  code?: Maybe<String>;
}

export interface SegmentUpdateWithoutProductsDataInput {
  rule?: Maybe<String>;
}

export interface SegmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SegmentWhereInput>;
  AND?: Maybe<SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput>;
  OR?: Maybe<SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput>;
  NOT?: Maybe<SegmentSubscriptionWhereInput[] | SegmentSubscriptionWhereInput>;
}

export interface SegmentUpsertWithoutProductsInput {
  update: SegmentUpdateWithoutProductsDataInput;
  create: SegmentCreateWithoutProductsInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
}

export interface SegmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  rule?: Maybe<String>;
  rule_not?: Maybe<String>;
  rule_in?: Maybe<String[] | String>;
  rule_not_in?: Maybe<String[] | String>;
  rule_lt?: Maybe<String>;
  rule_lte?: Maybe<String>;
  rule_gt?: Maybe<String>;
  rule_gte?: Maybe<String>;
  rule_contains?: Maybe<String>;
  rule_not_contains?: Maybe<String>;
  rule_starts_with?: Maybe<String>;
  rule_not_starts_with?: Maybe<String>;
  rule_ends_with?: Maybe<String>;
  rule_not_ends_with?: Maybe<String>;
  products_every?: Maybe<ProductSegmentWhereInput>;
  products_some?: Maybe<ProductSegmentWhereInput>;
  products_none?: Maybe<ProductSegmentWhereInput>;
  AND?: Maybe<SegmentWhereInput[] | SegmentWhereInput>;
  OR?: Maybe<SegmentWhereInput[] | SegmentWhereInput>;
  NOT?: Maybe<SegmentWhereInput[] | SegmentWhereInput>;
}

export interface ProductSegmentUpsertWithWhereUniqueWithoutSegmentInput {
  where: ProductSegmentWhereUniqueInput;
  update: ProductSegmentUpdateWithoutSegmentDataInput;
  create: ProductSegmentCreateWithoutSegmentInput;
}

export interface ProductUpdateOneRequiredWithoutSegmentsInput {
  create?: Maybe<ProductCreateWithoutSegmentsInput>;
  update?: Maybe<ProductUpdateWithoutSegmentsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutSegmentsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductSegmentUpdateManyWithoutSegmentInput {
  create?: Maybe<
    | ProductSegmentCreateWithoutSegmentInput[]
    | ProductSegmentCreateWithoutSegmentInput
  >;
  delete?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  connect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  set?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProductSegmentWhereUniqueInput[] | ProductSegmentWhereUniqueInput
  >;
  update?: Maybe<
    | ProductSegmentUpdateWithWhereUniqueWithoutSegmentInput[]
    | ProductSegmentUpdateWithWhereUniqueWithoutSegmentInput
  >;
  upsert?: Maybe<
    | ProductSegmentUpsertWithWhereUniqueWithoutSegmentInput[]
    | ProductSegmentUpsertWithWhereUniqueWithoutSegmentInput
  >;
  deleteMany?: Maybe<
    ProductSegmentScalarWhereInput[] | ProductSegmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductSegmentUpdateManyWithWhereNestedInput[]
    | ProductSegmentUpdateManyWithWhereNestedInput
  >;
}

export interface ProductSegmentUpdateManyWithWhereNestedInput {
  where: ProductSegmentScalarWhereInput;
  data: ProductSegmentUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProductSegmentUpdateManyDataInput {
  code?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProductSegmentCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  segment: SegmentCreateOneWithoutProductsInput;
  product: ProductCreateOneWithoutSegmentsInput;
}

export interface ProductCreateWithoutSegmentsInput {
  id?: Maybe<ID_Input>;
  itemCode: String;
  baseItemCode: String;
  colourCode?: Maybe<String>;
  sizeCode?: Maybe<String>;
}

export interface ProductSegmentUpdateInput {
  code?: Maybe<String>;
  segment?: Maybe<SegmentUpdateOneRequiredWithoutProductsInput>;
  product?: Maybe<ProductUpdateOneRequiredWithoutSegmentsInput>;
}

export interface ProductUpdateManyMutationInput {
  itemCode?: Maybe<String>;
  baseItemCode?: Maybe<String>;
  colourCode?: Maybe<String>;
  sizeCode?: Maybe<String>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface SegmentCreateInput {
  id?: Maybe<ID_Input>;
  rule: String;
  products?: Maybe<ProductSegmentCreateManyWithoutSegmentInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductSegmentUpdateWithoutSegmentDataInput {
  code?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredWithoutSegmentsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  surname: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductSegment {
  count: Int;
}

export interface AggregateProductSegmentPromise
  extends Promise<AggregateProductSegment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSegmentSubscription
  extends Promise<AsyncIterator<AggregateProductSegment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductSegmentEdge {
  node: ProductSegment;
  cursor: String;
}

export interface ProductSegmentEdgePromise
  extends Promise<ProductSegmentEdge>,
    Fragmentable {
  node: <T = ProductSegmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductSegmentEdgeSubscription
  extends Promise<AsyncIterator<ProductSegmentEdge>>,
    Fragmentable {
  node: <T = ProductSegmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSegmentConnection {
  pageInfo: PageInfo;
  edges: ProductSegmentEdge[];
}

export interface ProductSegmentConnectionPromise
  extends Promise<ProductSegmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductSegmentEdge>>() => T;
  aggregate: <T = AggregateProductSegmentPromise>() => T;
}

export interface ProductSegmentConnectionSubscription
  extends Promise<AsyncIterator<ProductSegmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductSegmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSegmentSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Segment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rule: String;
}

export interface SegmentPromise extends Promise<Segment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rule: () => Promise<String>;
  products: <T = FragmentableArray<ProductSegment>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SegmentSubscription
  extends Promise<AsyncIterator<Segment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rule: () => Promise<AsyncIterator<String>>;
  products: <T = Promise<AsyncIterator<ProductSegmentSubscription>>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SegmentNullablePromise
  extends Promise<Segment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rule: () => Promise<String>;
  products: <T = FragmentableArray<ProductSegment>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SegmentSubscriptionPayload {
  mutation: MutationType;
  node: Segment;
  updatedFields: String[];
  previousValues: SegmentPreviousValues;
}

export interface SegmentSubscriptionPayloadPromise
  extends Promise<SegmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SegmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SegmentPreviousValuesPromise>() => T;
}

export interface SegmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SegmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SegmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SegmentPreviousValuesSubscription>() => T;
}

export interface AggregateSegment {
  count: Int;
}

export interface AggregateSegmentPromise
  extends Promise<AggregateSegment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSegmentSubscription
  extends Promise<AsyncIterator<AggregateSegment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  itemCode: String;
  baseItemCode: String;
  colourCode?: String;
  sizeCode?: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  itemCode: () => Promise<String>;
  baseItemCode: () => Promise<String>;
  colourCode: () => Promise<String>;
  sizeCode: () => Promise<String>;
  segments: <T = FragmentableArray<ProductSegment>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemCode: () => Promise<AsyncIterator<String>>;
  baseItemCode: () => Promise<AsyncIterator<String>>;
  colourCode: () => Promise<AsyncIterator<String>>;
  sizeCode: () => Promise<AsyncIterator<String>>;
  segments: <T = Promise<AsyncIterator<ProductSegmentSubscription>>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  itemCode: () => Promise<String>;
  baseItemCode: () => Promise<String>;
  colourCode: () => Promise<String>;
  sizeCode: () => Promise<String>;
  segments: <T = FragmentableArray<ProductSegment>>(args?: {
    where?: ProductSegmentWhereInput;
    orderBy?: ProductSegmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SegmentConnection {
  pageInfo: PageInfo;
  edges: SegmentEdge[];
}

export interface SegmentConnectionPromise
  extends Promise<SegmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SegmentEdge>>() => T;
  aggregate: <T = AggregateSegmentPromise>() => T;
}

export interface SegmentConnectionSubscription
  extends Promise<AsyncIterator<SegmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SegmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSegmentSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductSegment {
  id: ID_Output;
  code: String;
}

export interface ProductSegmentPromise
  extends Promise<ProductSegment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  segment: <T = SegmentPromise>() => T;
  product: <T = ProductPromise>() => T;
}

export interface ProductSegmentSubscription
  extends Promise<AsyncIterator<ProductSegment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  segment: <T = SegmentSubscription>() => T;
  product: <T = ProductSubscription>() => T;
}

export interface ProductSegmentNullablePromise
  extends Promise<ProductSegment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  segment: <T = SegmentPromise>() => T;
  product: <T = ProductPromise>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProductSegmentPreviousValues {
  id: ID_Output;
  code: String;
}

export interface ProductSegmentPreviousValuesPromise
  extends Promise<ProductSegmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
}

export interface ProductSegmentPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductSegmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface ProductSegmentSubscriptionPayload {
  mutation: MutationType;
  node: ProductSegment;
  updatedFields: String[];
  previousValues: ProductSegmentPreviousValues;
}

export interface ProductSegmentSubscriptionPayloadPromise
  extends Promise<ProductSegmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductSegmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductSegmentPreviousValuesPromise>() => T;
}

export interface ProductSegmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSegmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSegmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductSegmentPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  itemCode: String;
  baseItemCode: String;
  colourCode?: String;
  sizeCode?: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  itemCode: () => Promise<String>;
  baseItemCode: () => Promise<String>;
  colourCode: () => Promise<String>;
  sizeCode: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemCode: () => Promise<AsyncIterator<String>>;
  baseItemCode: () => Promise<AsyncIterator<String>>;
  colourCode: () => Promise<AsyncIterator<String>>;
  sizeCode: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  surname: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SegmentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  rule: String;
}

export interface SegmentPreviousValuesPromise
  extends Promise<SegmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rule: () => Promise<String>;
}

export interface SegmentPreviousValuesSubscription
  extends Promise<AsyncIterator<SegmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rule: () => Promise<AsyncIterator<String>>;
}

export interface SegmentEdge {
  node: Segment;
  cursor: String;
}

export interface SegmentEdgePromise extends Promise<SegmentEdge>, Fragmentable {
  node: <T = SegmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SegmentEdgeSubscription
  extends Promise<AsyncIterator<SegmentEdge>>,
    Fragmentable {
  node: <T = SegmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductSegment",
    embedded: false
  },
  {
    name: "Segment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
